var loadFramework = function(context) {
    var pluginRoot = context.scriptPath.stringByDeletingLastPathComponent();
    log("Plugin root:" + pluginRoot);

    if ([pluginRoot rangeOfString:"Containers"].length != 0) {
        doc.showMessage("Mac App Store version of Sketch is unsupported. Please update Sketch to the latest version from official site.");
        return false;
    }

    if (NSClassFromString('Sympli') == null) {
        var framework = pluginRoot.stringByAppendingPathComponent("SympliSketchPlugin.framework")
        removeQuarantineFlag(framework)
        return [[NSBundle bundleWithPath:framework] load];
    } else {
        return true;
    }
}

var removeQuarantineFlag = function(path) {
    var xattr = "/usr/bin/xattr";
    var args = ["-r", "-d", "com.apple.quarantine", path];
    var task = [NSTask launchedTaskWithLaunchPath:xattr arguments:args];
    task.waitUntilExit();
}

var launchSympliPlugin = function(context, mode) {
    var doc = context.document;

    // Show a warning when running on an unsupported version of Sketch
    var build = Number.MAX_VALUE;
    var appVersion = "Unknown";

    if (NSClassFromString("MSApplicationMetadata") != null) {
        build = parseInt(MSApplicationMetadata.metadata().build);
        appVersion = MSApplicationMetadata.metadata().appVersion;
    } else if (NSClassFromString("BCSketchInfo") != null) {
        // Sketch 72+
        build = parseInt(BCSketchInfo.shared().metadata().build);
        appVersion = BCSketchInfo.shared().metadata().appVersion;
    }

    var hasntBeenActivatedYet = (NSClassFromString('Sympli') == null);
    var incompatible = (build < /* Sketch 46.2 build number */44496);

    if (hasntBeenActivatedYet && incompatible) {
        var alert = NSAlert.new()
        alert.alertStyle = NSCriticalAlertStyle;
        alert.setMessageText("Sympli requires Sketch 46.2, you are using Sketch " + appVersion);
        alert.setInformativeText("Sympli is incompatible with your version of Sketch. We recommend you to upgrade to a newer version if possible.");
        [alert addButtonWithTitle:@"Continue Anyway"];
        [alert addButtonWithTitle:@"Cancel"];
        if ([alert runModal] != NSAlertFirstButtonReturn) {
            return;
        }
    }

    try {

        if ((doc.isDraft() || doc.fileURL()==nil)) {
            doc.showMessage("Sympli: Please save the document, so we have all your changes.");
            return;
        }

        var selectedArtboards = context.selection;
        if (![selectedArtboards count]) {
            selectedArtboards = [[doc currentPage] artboards];
        }

        if (![selectedArtboards count]) {
           var app = [NSApplication sharedApplication];
           [app displayDialog:"Please create an artboard for export." withTitle:"Sympli"]      
           return;
        }
        
        var selectedArtboardsSelf = [selectedArtboards valueForKeyPath:@"parentArtboard.@distinctUnionOfObjects.self"];
        if(selectedArtboardsSelf) {
            var notNSNullPredicate = [NSPredicate predicateWithFormat:@"self!=nil AND NOT self isKindOfClass: %@", [NSNull class]];
            selectedArtboardsSelf = [selectedArtboardsSelf filteredArrayUsingPredicate:notNSNullPredicate];
        }
        var selectedArtboardsIds = [selectedArtboardsSelf valueForKeyPath:@"@distinctUnionOfObjects.objectID"];
        if (![selectedArtboardsIds count]) {
            doc.showMessage("Please select artboard to export.");
            return;
        }

        var loadFrameworkResult = loadFramework(context);
        log("Framework loaded: " + loadFrameworkResult);

        if (loadFrameworkResult) {
    	    var filePath = doc.fileURL().path();
            log("Processing file: " + filePath);
            var plugin = context.plugin;
            var sympli = [[Sympli alloc] init];
            if (![[sympli version] isEqualToString:[plugin version]]) {
                doc.showMessage("Please restart Sketch to finish plugin update.");
                return;
            }
            log("Initialized Sympli");

            var artboards = [[selectedArtboards valueForKeyPath:@"parentArtboard.@distinctUnionOfObjects.self"] mutableCopy];
            [artboards removeObjectIdenticalTo:[NSNull null]];

            [sympli process:filePath withPath:"<this option is not used anymore and can be deleted>" andArtboards:selectedArtboardsIds document:doc artboards:artboards selection:context.selection mode:mode context: context];
            log("call sympli: " + loadFrameworkResult);
        }
    } catch (err) {
        doc.showMessage("Sympli: Unknown error.");
        log(err);
    }
}

var exportDesignSystem = function(context) {
    launchSympliPlugin(context, "showLoginIfNeededThenRedirectToDSExportFlow");
}

var manageTags = function(context) {
    launchSympliPlugin(context, "manageTags");
}

var hideTags = function(context) {
    launchSympliPlugin(context, "hideTags");
}

var onRun = function(context) {
    launchSympliPlugin(context, "export");  
}
