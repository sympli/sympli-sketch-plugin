//
//  Sympli.cocoascript
//  Copyright © 2015-2022 Sympli. All rights reserved.
//

// MARK: - User Commands

var exportArtboards = function(context) {
    run(context, function () {
        Sympli.exportArtboardsInDocument(context.document);
    });
}

var exportDesignSystem = function(context) {
    run(context, function () {
        Sympli.exportDesignSystemInDocument(context.document);
    });
}

// MARK: -

var run = function(context, action)
{
    if (!validateSketchCompatibility()) {
        return;
    }

    const document = context.document;
    const installedPluginVersion = runningSympliPluginVersion(context);

    const loaded = loadNativeCodeBundle(context);
    if (!loaded) {
        document.showMessage("⚠️ Sympli: Unable to start the plugin (" + (installedPluginVersion || "unknown version")  + "). Please update Sympli to the latest version and try again.");
        return;
    }

    const loadedPluginVersions = Sympli.version();
    if (![loadedPluginVersions isEqualToString:installedPluginVersion]) {
        document.showMessage("⚠️ Sympli: Please restart Sketch to finish the plugin update process.");
        return;
    }

    action()
}

// MARK: - Utils

var loadNativeCodeBundle = function(context)
{
    if (NSClassFromString('Sympli')) {
        return true
    }

    var removeQuarantineFlag = function(path) {
        const xattr = "/usr/bin/xattr";
        const args = ["-r", "-d", "com.apple.quarantine", path];
        const task = [NSTask launchedTaskWithLaunchPath:xattr arguments:args];
        task.waitUntilExit();
    }

    const root = context.scriptPath.stringByDeletingLastPathComponent();
    const frameworkPath = root.stringByAppendingPathComponent("SympliSketchPlugin.framework")

    removeQuarantineFlag(frameworkPath)
    return [[NSBundle bundleWithPath:frameworkPath] load];
}

var validateSketchCompatibility = function()
{
    var build = Number.MAX_VALUE;
    var appVersion = "Unknown";

    if (NSClassFromString("BCSketchInfo") != null) {
        // Sketch 72+
        build = parseInt(BCSketchInfo.shared().metadata().build);
        appVersion = BCSketchInfo.shared().metadata().appVersion;
    } else if (NSClassFromString("MSApplicationMetadata") != null) {
        build = parseInt(MSApplicationMetadata.metadata().build);
        appVersion = MSApplicationMetadata.metadata().appVersion;
    }

    const hasntBeenActivatedYet = (NSClassFromString('Sympli') == null);
    const incompatible = (build < /* Sketch 46.2 build number, see SMP-12358 */44496);

    if (hasntBeenActivatedYet && incompatible) {
        const alert = NSAlert.new()
        alert.alertStyle = NSCriticalAlertStyle;
        alert.setMessageText("Sympli requires Sketch 46.2, but you have Sketch " + appVersion);
        alert.setInformativeText("Sympli is incompatible with your version of Sketch. We recommend you to upgrade to a newer version if possible.");
        [alert addButtonWithTitle:@"Continue Anyway"];
        [alert addButtonWithTitle:@"Cancel"];
        if ([alert runModal] != NSAlertFirstButtonReturn) {
            return false;
        }
    }

    return true;
}

var runningSympliPluginVersion = function(context)
{
    const plugin = context.plugin
    if ((plugin) && [plugin respondsToSelector:NSSelectorFromString("version")]) {
        return plugin.version();
    }

    return null;
}
